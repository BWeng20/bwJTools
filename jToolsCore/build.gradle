plugins {
    id 'java-library'
}

sourceSets {
    main {
        java.srcDir file('src/main/java')
        resources.srcDir file('src/main/resources')
    }
    test {
        java.srcDir file('src/test/java')
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

dependencies {
    implementation 'io.github.bweng20:jSVG:1.4'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'javax.json:javax.json-api:1.1.4'
    implementation 'org.glassfish:javax.json:1.1.4'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'javax.interceptor:javax.interceptor-api:1.2.2'
    api 'org.netbeans.api:org-netbeans-swing-outline:RELEASE180'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--add-exports', 'java.desktop/sun.awt.shell=ALL-UNNAMED'
        ]
    }
}

task jToolsTest(type: Test) {
    description = 'Runs tests.'
    group = 'verification'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
}

check.dependsOn jToolsTest

processResources {
    duplicatesStrategy = 'exclude'
}

javadoc {
}

jar {
    manifest {
        attributes 'Implementation-Title': 'JTools',
                'Implementation-Version': project.version,
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
    }

    archiveBaseName = 'jtools';
    includeEmptyDirs = false;
    from "${rootProject.projectDir}/licenses"

}

publishing {
    repositories {
        maven {
            url publishUrl
            credentials {
                // Place this two variable with the correct values in your 
                // <Gradle-User-Home>/gradle.properties
                username sonatype_username
                password sonatype_password
            }
        }
    }
    publications {
        jtools(MavenPublication) {
            artifactId = 'jtools'
            from components.java

            artifacts = [jar, sourcesJar, javadocJar]

            pom {
                name = 'jtools'
                description = 'A minimalistic set of tools for rapid application development'
                url = 'https://github.com/BWeng20/bwJTools'
                licenses {
                    license {
                        name = 'MIT License'
                    }
                }
                developers {
                    developer {
                        id = 'bweng20'
                        name = 'Bernd Wengenrot'
                        email = 'Bernd.Wengenrot@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/BWeng20/bwJTools.git'
                    developerConnection = 'scm:git:ssh://github.com:BWeng20/bwJTools.git'
                    url = 'https://github.com/BWeng20/bwJTools'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.jtools
}
